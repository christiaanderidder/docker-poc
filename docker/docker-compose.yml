version: '3.4'

services:
  docker-poc-worker:
    image: christiaanderidder/docker-poc-worker
    build:
      context: ../
      dockerfile: src/Worker/Docker.Worker/Dockerfile
    depends_on:
      - docker-poc-mssql
      - docker-poc-rabbitmq

  docker-poc-scheduler:
    image: christiaanderidder/docker-poc-scheduler
    build:
      context: ../
      dockerfile: src/Worker/Docker.Scheduler/Dockerfile
    depends_on:
      - docker-poc-mssql
      - docker-poc-rabbitmq

  docker-poc-web:
    image: christiaanderidder/docker-poc-web
    build:
      context: ../
      dockerfile: src/Web/Docker.Web/Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - docker-poc-mssql
      - docker-poc-rabbitmq
      - docker-poc-logstash

  docker-poc-api:
    image: christiaanderidder/docker-poc-api
    build:
      context: ../
      dockerfile: src/Web/Docker.Api/Dockerfile
    ports:
      - "9080:80"
      - "9443:443"
    depends_on:
      - docker-poc-mssql
      - docker-poc-rabbitmq
      - docker-poc-logstash

  docker-poc-oauth:
    image: christiaanderidder/docker-poc-oauth
    build:
      context: ../
      dockerfile: src/Web/Docker.OAuth/Dockerfile
    ports:
      - "7080:80"
      - "7443:443"
    depends_on:
      - docker-poc-mssql
      - docker-poc-rabbitmq
      - docker-poc-logstash
  
  docker-poc-mssql:
    image: "mcr.microsoft.com/mssql/server"
    user: root
    ports: 
      - "11433:1433"
    volumes:
      - docker-poc-mssql-data:/var/opt/mssql/data
    environment:
      SA_PASSWORD: "yourStrong(!)Password"
      # Any value works. See: https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15
      # Use x, because Y breaks conversion using kompose. See: https://github.com/kubernetes/kompose/issues/1253
      ACCEPT_EULA: "x"

  docker-poc-rabbitmq:
    image: "masstransit/rabbitmq"
    ports: 
      - "15672:15672"
      - "5672:5672"

  docker-poc-elasticsearch:
    build:
      context: elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node

  docker-poc-logstash:
    command:
      - --config.reload.automatic
    build:
      context: elk/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - docker-poc-elasticsearch

  docker-poc-kibana:
    build:
      context: elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    depends_on:
      - docker-poc-elasticsearch

volumes:
  docker-poc-mssql-data:
  elasticsearch: